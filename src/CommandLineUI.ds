using std;

namespace Arcade
{
    /// <summary>
    /// Defines a common interface for objects that parse data of some type and
    /// return the result in another.
    /// </summary>
    public interface IParser<TSource, TTarget>
    {
        /// <summary>
        /// Parses the given argument and returns the result.
        /// </summary>
        const TTarget Parse(TSource Arg);
    }

    /// <summary>
    /// A base class for interactive UI handlers.
    /// </summary>
    public abstract class InteractiveUIHandler : IUIHandler
    {
        /// <summary>
        /// Gets the interactive UI handler's board.
        /// </summary>
        public abstract Board Scene { const get; }

        /// <summary>
        /// Initializes the UI handler and displays the board right away.
        /// </summary>
        public abstract void Initialize(Board Value)
            in { Value != null }
            in { !IsInitialized }
            out { IsInitialized };

        /// <summary>
        /// Gets a boolean flag that indicates whether the UI handler has been initialized.
        /// </summary>
        public abstract bool IsInitialized { const get; }

        /// <summary>
        /// Displays the board.
        /// </summary>
        public abstract void Display()
            in { this.IsInitialized };

        /// <summary>
        /// Logs an error message.
        /// </summary>
        protected abstract void LogError(string Message);

        /// <summary>
        /// Applies a command to the board.
        /// </summary>
        public virtual void Apply(ICommand<Board> Command)
            in { Command != null }
            in { IsInitialized }
        {
            if (Command is EmptyCommand<Board>)
            {
                return;
            }
            else if (Command is CompositeCommand<Board>)
            {
                var compCommand = (CompositeCommand<Board>)Command;
                foreach (var item in compCommand.Commands)
                {
                    Apply(item);
                }
            }
            else if (!Command.Execute(Scene))
            {
                LogError("Actie kon niet uitgevoerd worden.");
            }
            else
            {
                Display();
            }
        }
    }

    /// <summary>
    /// A UI handler implementation that manages a command-line UI.
    /// </summary>
    public class CommandLineUI : InteractiveUIHandler
    {
        /// <summary>
        /// Creates a new command-line UI handler that outputs to the given output
        /// stream, based on the given other UI handler.
        /// </summary>
        public const this(set istream* inputStream, set UIHandlerBase Handler, set Actor MainActor)
            in { Handler != null }
            in { inputStream != null }
            in { MainActor != null };

        invariant { Handler != null }
        invariant { inputStream != null }
        invariant { MainActor != null }

        private istream* inputStream;

        /// <summary>
        /// Gets the command-line UI's inner UI handler.
        /// </summary>
        public UIHandlerBase Handler { const get; private set; }

        /// <summary>
        /// Gets the main actor for this UI dialog.
        /// </summary>
        public Actor MainActor { const get; private set; }

        public override Board Scene { const get return Handler.Scene; }

        private unordered_map<string, IParser<string, ICommand<Board>>> allParsers;
        /// <summary>
        /// Gets the command-line UI's action parsers.
        /// </summary>
        public unordered_map<string, IParser<string, ICommand<Board>>> ActionParsers
        {
            const get return allParsers;
        }

        /// <summary>
        /// Associates the given action parser with the given key.
        /// </summary>
        public void AddActionParser(string Key, IParser<string, ICommand<Board>> Parser)
            in { Parser != null }
        {
            allParsers[Key] = Parser;
        }

        /// <summary>
        /// Initializes the UI handler and displays the board right away.
        /// </summary>
        public override void Initialize(Board Value)
            in { Value != null }
            in { !IsInitialized }
            out { IsInitialized }
        {
            Handler.Initialize(Value);
            *Handler.OutputStream << "\n";
        }

        /// <summary>
        /// Gets a boolean flag that indicates whether the UI handler has been initialized.
        /// </summary>
        public override bool IsInitialized { const get return Handler.IsInitialized; }

        /// <summary>
        /// Displays the board.
        /// </summary>
        public override void Display()
            in { this.IsInitialized }
        {
            Handler.Display();
            *Handler.OutputStream << "\n";
        }

        /// <summary>
        /// Converts the given direction to an offset.
        /// </summary>
        public const Vector2<int> DirectionToOffset(string Direction)
        {
            if (Direction == "l") return new Vector2<int>(-1, 0);
            else if (Direction == "r") return new Vector2<int>(1, 0);
            else if (Direction == "u") return new Vector2<int>(0, 1);
            else if (Direction == "d") return new Vector2<int>(0, -1);
            else return new Vector2<int>(0, 0);
        }

        /// <summary>
        /// Parses an action.
        /// </summary>
        public const ICommand<Board> ParseAction(string Key, string Arg)
        {
            var parser = ActionParsers[Key];
            if (parser == null)
            {
                *Handler.OutputStream << "Onbekend type actie. Bestaande types:\n";
                foreach (var item in ActionParsers)
                {
                    *Handler.OutputStream  << " * " << item.first << "\n";
                }
                return null;
            }

            return parser.Parse(Arg);
        }

        /// <summary>
        /// Parses a move action.
        /// </summary>
        public const ICommand<Board> ParseMove(string Arg)
        {
            return new MoveCommand(MainActor, DirectionToOffset(Arg));
        }

        /// <summary>
        /// Parses an attack action.
        /// </summary>
        public const ICommand<Board> ParseAttack(string Arg)
        {
            return new AttackCommand(MainActor, DirectionToOffset(Arg));
        }

        /// <summary>
        /// Reads an action from the input stream.
        /// </summary>
        public ICommand<Board> ReadAction()
        {
            *inputStream >> string name;
            *inputStream >> string arg;

            return ParseAction(name, arg);
        }

        /// <summary>
        /// Plays the game until the player either wins or loses.
        /// </summary>
        public void PlayGame()
        {
            while (!Handler.HasEnded && Handler.Scene.HasPiece(MainActor))
            {
                var move = ReadAction();
                if (move == null)
                    next;

                Apply(move);
            }

            if (Handler.Scene.HasPiece(MainActor))
            {
                *Handler.OutputStream << "Gefeliciteerd! Je wint!\n";
            }
            else
            {
                *Handler.OutputStream << "Je bent verloren. :(\n";
            }
        }

        protected override void LogError(string Message)
        {
            *Handler.OutputStream << Message << "\n";
        }
    }
}
